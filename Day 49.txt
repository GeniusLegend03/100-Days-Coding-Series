/*
Day 49 coding Statement : Given 2 integer arrays X and Y of same size. Consider both arrays as vectors and print the minimum scalar product (Dot product) of 2 vectors.

Sample input 1 :
4
1 2 3 4
5 6 7 8

Sample output 1 :
60

Explanation :
(4*5 + 3*6 + 2*7 + 1*8) = 60

Sample input 2 :
4
-1 -2 -3 -4
5 6 -7 -8

Sample output 2 :
-17

Explanation :
(-1*-8 + -2*-7 + -3*6 + -4*5) = -17
*/

C++ Code:
#include <bits/stdc++.h>


using namespace std;

 


// SpecialSort function sorts negetive numbers in array1 in ascending order


// and positive numbers and zero in descending order


void SpecialSort(int vec1[],int n)


{

       
int idx=0;

       
sort(vec1,vec1+n);

       
while(vec1[idx] < 0)

       
	{

               
	idx++;

       
	}

       
int start = idx,end = n-1;

       
while(start<end)

       
	{

               
	swap(vec1[start],vec1[end]);

               
	start++;end--;

       
	}


}

 


// Find min product and move the elements to left side of both arrays


int MinimumScalarProduct(int vec1[],int vec2[],int n)


{

       
int min,sop=0,id1,id2;

       
for(int i = 0 ; i<n ; i++)

       
	{

               
	min = INT_MAX;

               
	for(int j = i ; j<n ; j++)

               
		{

                             
		if((vec1[i]*vec2[j]) < min)

                             
			{

                                           
			 min = vec1[i]*vec2[j];

                                            
			id1 = i; id2 = j;

                             
			}

               
		}

               
	sop = sop + min;

               
	swap(vec1[i],vec1[id1]);

               
	swap(vec2[i],vec2[id2]);

       
	}

       
return sop;


}


int main()


{

       
int n;            
cin>>n;

       
int vec1[n];

       
for(int i = 0 ; i<n ; i++)

       
	{

               
	cin>>vec1[i];

       
	}

       
int vec2[n];

       
for(int i = 0 ; i<n ; i++)

       
	{

               
	cin>>vec2[i];

       
	}

       
SpecialSort(vec1,n);

       
cout<<MinimumScalarProduct(vec1,vec2,n);

       
return 0;


}